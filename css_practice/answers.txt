 1. В чем разница между селектором по классу и по ID с точки зрения специфичности и возможности повторного использования?
Специфичность:
- Класс (.class): специфичность 0-1-0
- ID (id): специфичность 1-0-0
Повторное использование:
- Классы: многоразовые, можно применять к множеству элементов
- ID: уникальные, должны использоваться только для одного элемента на странице

 2. Как работает каскад в CSS и в каком порядке применяются стили при конфликте правил?
Порядок применения стилей:
1. Важность (!important)
2. Специфичность селектора
3. Порядок в коде (последнее правило имеет приоритет)

 3. Рассчитайте специфичность для селекторов:
- ul li.important = 0-1-2 (0 ID, 1 класс, 2 элемента)
- site-title = 1-0-0 (1 ID, 0 классов, 0 элементов)
- .content > .featured-post = 0-2-0 (0 ID, 2 класса, 0 элементов)

 4. Какие свойства в CSS наследуются по умолчанию, а какие нет?
Наследуемые свойства:
- color, font-family, font-size, line-height, text-align
Ненаследуемые свойства:
- margin, padding, border, background, width, height

 5. Как работает селектор > (дочерний селектор) и чем он отличается от селектора потомков (через пробел)?
Дочерний селектор (>): выбирает только прямых потомков
css
div > p { } / Выберет только параграфы, непосредственно вложенные в div /
Селектор потомков (пробел): выбирает всех потомков любого уровня вложенности
css
div p { } / Выберет все параграфы внутри div на любом уровне /

 6. Для чего используются псевдоклассы :hover и :nth-child()? В каких практических задачах они могут пригодиться?
:hover - стили при наведении курсора:
- Интерактивные кнопки
- Выпадающие меню
- Подсветка ссылок
:nth-child() - выбор элементов по порядковому номеру:
- Чередование цветов строк таблицы
- Стилизация определенных элементов списка
- Создание zebra-эффекта

 7. Что делает правило !important и почему его следует использовать с осторожностью?
!important дает правилу наивысший приоритет, переопределяя все другие правила.
Проблемы использования:
- Нарушает естественный каскад CSS
- Усложняет отладку
- Создает проблемы с переопределением стилей
- Затрудняет поддержку кода

 8. Как псевдоэлементы ::before и ::after расширяют возможности CSS и какой контент они могут содержать?
Возможности:
- Добавление декоративного контента без изменения HTML
- Создание иконок, разделителей, украшений
- Генерация нумерации и меток
Содержимое:
- Текст: content: "➤ ";
- Иконки: content: "★ ";
- Пустое пространство для оформления
- Атрибуты: content: attr(data-label)

 9. В каком порядке браузер применяет CSS-правила при одинаковой специфичности селекторов?
При одинаковой специфичности браузер применяет последнее объявление в коде (правило, которое идет ниже в CSS-файле).

 10. Как инструменты разработчика в браузере помогают анализировать и отлаживать CSS-код?
Возможности DevTools:
- Инспектор элементов - просмотр примененных стилей
- Панель Styles - анализ каскада и специфичности
- Computed - просмотр итоговых вычисленных стилей
- Изменение в реальном времени - эксперименты без сохранения
- Анализ наследования - просмотр унаследованных свойств
- Отладка медиа-запросов - тестирование адаптивности
- Эмуляция устройств - проверка на разных экранах
Эти инструменты позволяют быстро находить и исправлять проблемы со стилями, тестировать изменения и понимать, как применяются CSS-правила.